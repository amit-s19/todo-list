{"version":3,"sources":["Todo.js","NewForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","handleRemove","bind","handleEdit","handleChange","handleUpdate","handleToggle","this","setState","removeTask","id","evt","preventDefault","updateTask","target","name","value","toggleCompletion","className","onSubmit","type","onChange","completed","onClick","class","Component","NewForm","handleSubmit","createTask","uuid","htmlFor","placeholder","TodoList","todos","newTask","filter","t","updatedTask","updatedTodos","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.80d1be87.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Todo.css';\r\n\r\nclass Todo extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isEditing: false,\r\n            task: this.props.task\r\n        };\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.handleEdit = this.handleEdit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.handleToggle = this.handleToggle.bind(this);\r\n    }\r\n    \r\n    handleEdit() {\r\n        this.setState({ isEditing: !this.state.isEditing});\r\n    }\r\n\r\n    handleRemove() {\r\n        this.props.removeTask(this.props.id);\r\n    }\r\n\r\n    handleUpdate(evt) {\r\n        evt.preventDefault();\r\n        this.props.updateTask(this.props.id, this.state.task);\r\n        this.setState({\r\n            isEditing: false\r\n        })\r\n    }\r\n\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name] : evt.target.value\r\n        });\r\n    }\r\n\r\n    handleToggle(evt) {\r\n        this.props.toggleCompletion(this.props.id);\r\n    }\r\n\r\n    render() {\r\n        let result;\r\n        if(this.state.isEditing) {\r\n            result = (\r\n                <div className=\"Todo\">\r\n                    <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\r\n                        <input \r\n                            type=\"text\"\r\n                            value={this.state.task}\r\n                            name=\"task\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                        <button>Save</button>\r\n                    </form>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            result = (\r\n                <div className=\"Todo\">\r\n                <li className={this.props.completed ? 'Todo-task completed' : 'Todo-task'} onClick={this.handleToggle}>{this.props.task}</li>\r\n                <div className=\"Todo-buttons\">\r\n                    <button onClick={this.handleEdit}><i class=\"fa fa-pencil\"/></button>\r\n                    <button onClick={this.handleRemove}><i class=\"fa fa-trash\"/></button>\r\n                </div>\r\n                </div>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Todo;","import React, {Component} from 'react';\r\nimport './NewForm.css';\r\nimport uuid from 'uuid/v4';\r\n\r\nclass NewForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            task: ''\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name] : evt.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n        this.props.createTask({...this.state, id: uuid(), completed: false});\r\n        this.setState({task: ''})\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <form className=\"NewForm\" onSubmit={this.handleSubmit}>\r\n                <label htmlFor=\"task\">New Task</label>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"New Task\"\r\n                    name=\"task\"\r\n                    id=\"task\"\r\n                    value={this.state.task}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <button>Add Task</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewForm;","import React, {Component} from 'react';\r\nimport \"./TodoList.css\";\r\nimport Todo from './Todo';\r\nimport NewForm from './NewForm';\r\n\r\nclass TodoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos: []\r\n        };\r\n        this.createTask = this.createTask.bind(this);\r\n        this.removeTask = this.removeTask.bind(this);\r\n        this.updateTask = this.updateTask.bind(this);\r\n        this.toggleCompletion = this.toggleCompletion.bind(this)\r\n    }\r\n\r\n    createTask(newTask) {\r\n        this.setState({\r\n            todos: [...this.state.todos, newTask]\r\n        })\r\n    }\r\n\r\n    removeTask(id) {\r\n        this.setState({\r\n            todos: this.state.todos.filter(t => t.id !== id)\r\n        });\r\n    }\r\n\r\n    updateTask(id, updatedTask) {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if(todo.id === id) {\r\n                return {...todo, task: updatedTask}\r\n            }\r\n            return todo;\r\n        });\r\n        this.setState({todos: updatedTodos});\r\n    }\r\n\r\n    toggleCompletion(id) {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if(todo.id === id) {\r\n                return {...todo, completed: !todo.completed}\r\n            }\r\n            return todo;\r\n        });\r\n        this.setState({todos: updatedTodos});\r\n    }\r\n\r\n    render() {\r\n        const todos = this.state.todos.map(todo => {\r\n            return(\r\n                <Todo                \r\n                    key={todo.id}\r\n                    id={todo.id} \r\n                    task={todo.task} \r\n                    completed={todo.completed}\r\n                    updateTask={this.updateTask}\r\n                    removeTask={this.removeTask} \r\n                    toggleCompletion={this.toggleCompletion}\r\n                />\r\n            ); \r\n        })\r\n        return(\r\n            <div className=\"TodoList\">\r\n                <h1>Todo List! \r\n                    <span> Made in react with <i class=\"em em-black_heart\" ></i></span>\r\n                </h1>\r\n                <ul>{todos}</ul>\r\n                <NewForm createTask={this.createTask} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport  TodoList from './TodoList';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}